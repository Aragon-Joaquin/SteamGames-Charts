# once finished this, just execute this:
# go run github.com/99designs/gqlgen generate

scalar StringID

#! generic fields
type price_overview_types {
	currency: String!
	initial: Int!
	final: Int!
	discount_percent: Int
	final_formatted: String!
}

type release_date_types {
	date: String
}

type playtime_platforms_types {
	linux: Int
	mac: Int
	windows: Int
}

type genres_types {
	id: String!
	description: String
}

type Achievement {
	name: String!
	defaultvalue: Int!
	displayName: String!
	hidden: Int!
	description: String
	icon: String!
	icongray: String!
}

type GameStats {
	achievements: [Achievement!]!
}

type Achievement_Percentage {
	name: String!
	percent: Float!
}

#! endpoints

type GameDetails {
	steam_appid: ID!
	name: String!
	required_age: Int
	short_description: String
	supported_languages: String
	developers: [String]
	publishers: [String]
	price_overview: price_overview_types
	genres: [genres_types]!
	release_date: release_date_types
	header_image: String
}

type UserOwnedGames {
	appid: ID!
	name: String!
	img_icon_url: String
	playtime_forever: Int
	playtime_platforms: playtime_platforms_types
	rtime_last_played: Int
}

# for some reason its "persona" instead of "person" lmao
type PlayerSummaries {
	steamid: StringID!
	personastate: Int!
	personaname: String!
	profileurl: String!
	avatarfull: String
	lastlogoff: Int
}

type FriendList {
	steamid: StringID!
	relationship: String!
	friends_since: Int!
}

type RecentlyGames {
	appid: ID!
	name: String!
	playtime_2weeks: Int
	playtime_forever: Int
	img_icon_url: String
	playtime_windows_forever: Int
	playtime_mac_forever: Int
	playtime_linux_forever: Int
	playtime_deck_forever: Int
}

type SchemaForGame {
	gameName: String!
	gameVersion: String!
	availableGameStats: GameStats!
}

type AchievementPercentages {
	achievements: [Achievement_Percentage!]!
}

# this is cased differently than the others for some reason
type PlayerBans {
	SteamId: StringID!
	CommunityBanned: Boolean!
	VACBanned: Boolean!
	NumberOfVACBans: Int!
	DaysSinceLastBan: Int!
	NumberOfGameBans: Int!
	EconomyBan: String!
}
#! Request Types

type GDetailsRes {
	success: Boolean!
	data: GameDetails!
}

type UOGamesRes {
	game_count: Int!
	games: [UserOwnedGames]!
}

type PSummariesRes {
	players: [PlayerSummaries!]!
}

type FListRes {
	friends: [FriendList!]!
}

type RGamesRes {
	total_count: Int!
	games: [RecentlyGames!]!
}

type SchemaRes {
	game: SchemaForGame!
}

type APercentagesRes {
	achievementpercentages: AchievementPercentages!
}

type PBansRes {
	players: [PlayerBans!]!
}

#! Query
type Query {
	getGameDetails(steam_appid: ID!): GDetailsRes!
	getUserOwnedGames(steamid: ID!): UOGamesRes!
	getPlayerSummaries(steamids: [ID!]!): PSummariesRes!
	getFriendList(steamid: ID!): FListRes!
	getRecentGames(steamid: ID!): RGamesRes!
	getSchemaForGame(appid: ID!): SchemaRes!
	getAchievementPercentages(gameid: ID!): APercentagesRes!
	getPlayerBans(steamids: [ID!]!): PBansRes!
}
