package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"serverGo/graph/model"
	u "serverGo/utils"
)

type GenericStruct struct {
	Success bool              `json:"success"`
	Data    model.GameDetails `json:"data"`
}

// GetGameDetails is the resolver for the getGameDetails field.
func (r *queryResolver) GetGameDetails(ctx context.Context, steamAppid string) (*model.GameDetails, error) {
	end, err := u.MakePublicEndpoint("getGameDetails")

	if err != nil {
		return nil, err
	}

	end.AddQueries(u.QueriesStruct{Key: "appids", Val: steamAppid})

	go func() {
		r.Resolver.FetchAPI(ctx, steamAppid, end.URL.String())
	}()

	/*val, _ :=*/
	<-r.Resolver.ResultsChan

	var wrapper GenericStruct

	if err := json.Unmarshal([]byte(r.BodyResponse), &wrapper); err != nil {
		return nil, err
	}

	fmt.Println("\n", string(r.BodyResponse))
	fmt.Println("\n", wrapper.Data)

	return &wrapper.Data, nil
}

// GetUserOwnedGames is the resolver for the getUserOwnedGames field.
func (r *queryResolver) GetUserOwnedGames(ctx context.Context, steamid string) ([]*model.UserOwnedGames, error) {
	panic(fmt.Errorf("not implemented: GetUserOwnedGames - getUserOwnedGames"))
}

// GetPlayerSummaries is the resolver for the getPlayerSummaries field.
func (r *queryResolver) GetPlayerSummaries(ctx context.Context, steamids []string) ([]*model.GetPlayerSummaries, error) {
	panic(fmt.Errorf("not implemented: GetPlayerSummaries - getPlayerSummaries"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver {
	res := make(chan *http.Response)
	//! &queryResolver{r}
	return &queryResolver{Resolver: &Resolver{ResultsChan: res}}
}

type queryResolver struct{ *Resolver }
