package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"serverGo/graph/model"
	u "serverGo/utils"
)

// GetGameDetails is the resolver for the getGameDetails field.
func (r *queryResolver) GetGameDetails(ctx context.Context, steamAppid string) (*model.GameDetails, error) {
	fmt.Printf("%v\n", r.Resolver)
	end, err := u.MakePublicEndpoint("getGameDetails")

	if err != nil {
		panic(err)
	}

	r.Resolver.FetchAPI(ctx, steamAppid, end)
	return nil, nil
	// panic(fmt.Errorf("not implemented: GetGameDetails - getGameDetails"))
}

// GetUserOwnedGames is the resolver for the getUserOwnedGames field.
func (r *queryResolver) GetUserOwnedGames(ctx context.Context, steamid string) ([]*model.UserOwnedGames, error) {
	panic(fmt.Errorf("not implemented: GetUserOwnedGames - getUserOwnedGames"))
}

// GetPlayerSummaries is the resolver for the getPlayerSummaries field.
func (r *queryResolver) GetPlayerSummaries(ctx context.Context, steamids []string) ([]*model.GetPlayerSummaries, error) {
	panic(fmt.Errorf("not implemented: GetPlayerSummaries - getPlayerSummaries"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver {
	res := make(chan string)
	//! &queryResolver{r}
	return &queryResolver{Resolver: &Resolver{ResultsChan: res}}
}

type queryResolver struct{ *Resolver }
